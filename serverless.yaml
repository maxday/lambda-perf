service: lambda-perf

provider:
  name: aws
  memorySize: 128
  runtime: nodejs18.x
  region: ${env:AWS_REGION}
  iam:
    role:
      name: lambda-perf-${sls:stage}-role-${aws:region}
  timeout: 900
  iamRoleStatements:
    - Effect: Allow
      Action: "logs:CreateLogGroup"
      Resource: "arn:aws:logs:${aws:region}:${aws:accountId}:log-group:/aws/lambda/lambda-perf-*"
    - Effect: Allow
      Action: "logs:CreateLogStream"
      Resource: "arn:aws:logs:${aws:region}:${aws:accountId}:log-group:/aws/lambda/lambda-perf-*"
    - Effect: Allow
      Action: "logs:DeleteLogGroup"
      Resource: "arn:aws:logs:${aws:region}:${aws:accountId}:log-group:/aws/lambda/lambda-perf-*"
    - Effect: Allow
      Action: "logs:PutLogEvents"
      Resource: "arn:aws:logs:${aws:region}:${aws:accountId}:log-group:/aws/lambda/lambda-perf-*:*"
    - Effect: Allow
      Action: "lambda:CreateFunction"
      Resource: "arn:aws:lambda:${aws:region}:${aws:accountId}:function:lambda-perf-*"
    - Effect: Allow
      Action: "lambda:DeleteFunction"
      Resource: "arn:aws:lambda:${aws:region}:${aws:accountId}:function:lambda-perf-*"
    - Effect: Allow
      Action: "lambda:InvokeFunction"
      Resource: "arn:aws:lambda:${aws:region}:${aws:accountId}:function:lambda-perf-*"
    - Effect: Allow
      Action: "lambda:AddPermission"
      Resource: "arn:aws:lambda:${aws:region}:${aws:accountId}:function:lambda-perf-*"
    - Effect: Allow
      Action: "lambda:RemovePermission"
      Resource: "arn:aws:lambda:${aws:region}:${aws:accountId}:function:lambda-perf-*"
    - Effect: Allow
      Action: "logs:PutSubscriptionFilter"
      Resource: "arn:aws:logs:${aws:region}:${aws:accountId}:*:*"
    - Effect: Allow
      Action: "lambda:UpdateFunctionConfiguration"
      Resource: "arn:aws:lambda:${aws:region}:${aws:accountId}:function:lambda-perf-*"
    - Effect: Allow
      Action: "lambda:GetFunction"
      Resource: "arn:aws:lambda:${aws:region}:${aws:accountId}:function:lambda-perf-*"
    - Effect: Allow
      Action: "lambda:GetFunctionConfiguration"
      Resource: "arn:aws:lambda:${aws:region}:${aws:accountId}:function:lambda-perf-*"
    - Effect: Allow
      Action: "lambda:ListVersionsByFunction"
      Resource: "arn:aws:lambda:${aws:region}:${aws:accountId}:function:lambda-perf-*"
    - Effect: Allow
      Action: "lambda:PublishVersion"
      Resource: "arn:aws:lambda:${aws:region}:${aws:accountId}:function:lambda-perf-*"
    - Effect: Allow
      Action: "iam:PassRole"
      Resource: "arn:aws:iam::${aws:accountId}:role/lambda-perf-${sls:stage}-role-${aws:region}"
    - Effect: Allow
      Action: "s3:GetObject"
      Resource: "arn:aws:s3:::lambda-perf-${aws:region}/*"
    - Effect: Allow
      Action: "dynamodb:DeleteTable"
      Resource: "arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/report-log"
    - Effect: Allow
      Action: "dynamodb:CreateTable"
      Resource: "arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/report-log"
    - Effect: Allow
      Action: "dynamodb:Scan"
      Resource: "arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/report-log"
    - Effect: Allow
      Action: "dynamodb:PutItem"
      Resource: "arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/report-log"
    - Effect: Allow
      Action: "sqs:SendMessage"
      Resource: "arn:aws:sqs:${aws:region}:${aws:accountId}:lambda-perf-deployer"
    - Effect: Allow
      Action: "sqs:SendMessage"
      Resource: "arn:aws:sqs:${aws:region}:${aws:accountId}:lambda-perf-invoker"

package:
  patterns:
    - "!app"
    - "!s3-uploader"
    - "!docs"
    - "!data"
    - "!README.md"

functions:
  
  reportLogProcessor:
    package:
      individually: true
      patterns:
        - report-log-processor
        - "!function-trigger-deployer"
        - "!function-invoker"
        - "!function-deployer"
        - "!result-builder"
    handler: report-log-processor/app.handler

  functionInvoker:
    package:
      individually: true
      patterns:
        - "function-invoker"
        - "!function-trigger-deployer"
        - "!function-deployer"
        - "!report-log-processor"
        - "!result-builder"
    handler: function-invoker/app.handler
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - lambdaPerfInvoker
              - Arn
          batchSize: 1
  
  functionTriggerDeployer:
    package:
      individually: true
      patterns:
        - "function-trigger-deployer"
        - "!function-invoker"
        - "!function-deployer"
        - "!report-log-processor"
        - "!result-builder"
    handler: function-trigger-deployer/app.handler
    environment:
      QUEUE_NAME: lambda-perf-deployer
      ACCOUNT_ID: ${aws:accountId}
      LOG_PROCESSOR_ARN: 
        "Fn::GetAtt": [ ReportLogProcessorLambdaFunction, Arn ]
    events:
      - schedule: cron(30 13 * * ? *)

  resultBuilder:
    environment:
      GH_AUTH_TOKEN: ${env:GH_AUTH_TOKEN}
      LAMBDA_PERF_ENV: ${env:LAMBDA_PERF_ENV}
    package:
      individually: true
      patterns:
        - result-builder
        - "!function-trigger-deployer"
        - "!function-invoker"
        - "!function-deployer"
        - "!report-log-processor"
    handler: result-builder/app.handler
    events:
      - schedule: cron(0 14 * * ? *)

  functionDeployer:
    package:
      individually: true
      patterns:
        - "!function-trigger-deployer"
        - "!function-invoker"
        - "function-deployer"
        - "!report-log-processor"
        - "!result-builder"
    handler: function-deployer/app.handler
    environment:
      ROLE_ARN: arn:aws:iam::${aws:accountId}:role/lambda-perf-${sls:stage}-role-${aws:region}
      LOG_PROCESSOR_ARN: 
        "Fn::GetAtt": [ ReportLogProcessorLambdaFunction, Arn ]
      QUEUE_NAME: lambda-perf-invoker
      ACCOUNT_ID: ${aws:accountId}
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - lambdaPerfDeployer
              - Arn
          batchSize: 1

resources:
  Resources:
    lambdaPerfDeployer:
      Type: "AWS::SQS::Queue"
      Properties:
        QueueName: "lambda-perf-deployer"
        VisibilityTimeout: 900
    lambdaPerfInvoker:
      Type: "AWS::SQS::Queue"
      Properties:
        QueueName: "lambda-perf-invoker"
        VisibilityTimeout: 900