name: build and upload container to ECR

on:
  workflow_dispatch:
    inputs:
      mfaCode:
        type: string
        description: MFA Code
        required: true
      architecture:
        description: 'architecture'
        type: choice
        options:
          - x86_64
          - arm64
        required: true

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      runner: ${{ steps.select.outputs.runner }}
    steps:
      - name: Check branch
        id: select
        run: |
          if [ ${{ inputs.architecture }} == 'x86_64' ]; then
            echo "runner=ubuntu-latest" >> $GITHUB_OUTPUT
          else
            echo "runner=self-hosted" >> $GITHUB_OUTPUT
          fi
          cat $GITHUB_OUTPUT
      - name: AWS Authentication
        env:
          AWS_REGION: "us-east-1"
          AWS_MFA_ARN: ${{ secrets.RESTRICTED_AWS_MFA_ARN }}
          AWS_ACCESS_KEY_ID: ${{ secrets.RESTRICTED_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.RESTRICTED_AWS_SECRET_ACCESS_KEY }}
          # We set the duration-seconds to 30min because we upload this as an artifact because we don't want someone to be able to use it
        run: |
          creds_json=$(aws sts get-session-token --serial-number ${AWS_MFA_ARN} --token-code ${{ inputs.mfaCode }} --duration-seconds 1800)
          mkdir /tmp/creds
          echo $creds_json > /tmp/creds/creds_json
      - name: 'Upload Artifact'
        uses: actions/upload-artifact@v3
        with:
          name: creds_json
          path: /tmp/creds/
          retention-days: 1
  build-upload:
    strategy:
      matrix:
        region: [ "us-east-1","us-west-1", "eu-west-1", "eu-central-1" ]
    needs: setup
    runs-on: ${{ needs.setup.outputs.runner }}
    steps:
      - uses: actions/checkout@v3
      - name: Delete huge unnecessary folders
        run: |
          rm -rf /opt/hostedtoolcache
          rm -rf /usr/share/dotnet
          rm -rf /opt/ghc
          rm -rf "$AGENT_TOOLSDIRECTORY"
      - name: Download tmp credentials
        uses: actions/download-artifact@v3
        with:
          name: creds_json
          path: /tmp/creds/
      - name: build and deploy
        env:
          ARCHITECTURE: ${{ inputs.architecture }}
          AWS_REGION: ${{ matrix.region }}
          ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
          AWS_ACCESS_KEY_ID: ${{ secrets.RESTRICTED_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.RESTRICTED_AWS_SECRET_ACCESS_KEY }}
          AWS_MFA_ARN: ${{ secrets.RESTRICTED_AWS_MFA_ARN }}
        run: |
          export AWS_ACCESS_KEY_ID=$(cat /tmp/creds/creds_json | jq .Credentials.AccessKeyId |tr -d '"')
          export AWS_SECRET_ACCESS_KEY=$(cat /tmp/creds/creds_json | jq .Credentials.SecretAccessKey| tr -d '"')
          export AWS_SESSION_TOKEN=$(cat /tmp/creds/creds_json | jq .Credentials.SessionToken|tr -d '"')

          cd container-uploader
          yarn install
          node app.mjs

          UNTAGGED_IMAGES=$( aws ecr list-images --region ${AWS_REGION} --repository-name lambda-perf --filter "tagStatus=UNTAGGED" --query 'imageIds[*]' --output json )
          aws ecr batch-delete-image --region ${AWS_REGION} --repository-name lambda-perf --image-ids "$UNTAGGED_IMAGES"
